#! /bin/bash
#=======================================================================================
#
# Name: run_lar_subshell.sh
#
# Purpose: Run lar in a subshell.
#
# Usage:
#
# $ run_lar_subshell.sh [-h|--help] -c|--config <fcl> [-v|--version <version>]
#
# Options:
#
# -h|--help              - Print help message.
# -c|--config <fcl>      - Fcl file (required).
# -v|--version <version> - Uboonecode version (default $UBOONECODE_VERSION).
#
# Notes:
#
# 1.  This script uses as input the newest artroot file in the current working directory.
#
# 2.  The input file is deleted after processing, being replaced by the artroot file
#     generated by this script.
#
# 3.  There is no general provision for generating sam metadata for artroot or plain root
#     files generated by this script.
#
# Created: 4-Mar-2025  H. Greenlee
#
#=======================================================================================

# Help function.

function dohelp {
  echo "Usage: run_lar_subshell.sh [-h|--help] -c|--config <fcl> [-v|--version <version>]"
}

# Parse command line.

fcl=''
version=$UBOONECODE_VERSION

while [ $# -gt 0 ]; do
  case "$1" in

  # Help.

  -h|--help )
    dohelp
    exit
    ;;

  -c|--config )
    if [ $# -gt 1 ]; then
      fcl=$2
      shift
    else
      dohelp
      exit 1
    fi
    ;;

  -v|--version )
    if [ $# -gt 1 ]; then
      version=$2
      shift
    else
      dohelp
      exit 1
    fi
    ;;

  -* )
    echo "Unknown option $1"
    dohelp
    exit 1
    ;;

  * )
    echo "Bad argument $1"
    dohelp
    exit 1
    ;;

  esac
  shift
done

# Check options.

if [ x$fcl = x ]; then
  echo "No fcl specified."
  dohelp
  exit 1
fi

if [ x$version = x ]; then
  echo "No uboonecode version specified."
  dohelp
  exit 1
fi

echo "run_lar_subshell.sh invoked with the following options:"
echo "fcl = ${fcl}"
echo "uboonecode version = ${version}"

# Launch subshell.

bearer_opt=''
if [ x$BEARER_TOKEN_FILE != x ]; then
  bearer_opt="BEARER_TOKEN_FILE=$BEARER_TOKEN_FILE"
fi
env --ignore-environment \
  UPS_OVERRIDE='-H Linux64bit+3.10-2.17' \
  $bearer_opt \
  bash <<EOF

# Set fcl file.

fcl=$fcl

# Initialize environment.

source /cvmfs/uboone.opensciencegrid.org/products/setup_uboone.sh
setup uboonecode $version -q e17:prof

# Find artroot input file.

input=\`ls -t1 *.root | artroot_filter.py 2> /dev/null | head -1\`
if [ x\$input = x ]; then
  echo "No input file found."
  exit 1
else
  echo "Using input file \$input"
fi
#echo
#echo "input metadata:"
#echo
#sam_metadata_dumper \$input 2> /dev/null
#echo

# Run lar with selected fcl.

echo
echo "Run lar using fcl \$fcl"
lar -c \$fcl -s \$input -n 1000000 > lar_\${fcl}.out 2> lar_\${fcl}.err
stat=\$?
echo "lar completed with status \$stat"
if [ \$stat -ne 0 ]; then
  echo
  echo "stdout:"
  echo
  cat lar_\${fcl}.out
  echo
  echo "stderr:"
  echo
  cat lar_\${fcl}.out
  echo
  exit \$stat
fi

# Check output file.

output=\`ls -t1 *.root | artroot_filter.py 2> /dev/null | head -1\`
if [ x\$output = x -o x\$output = x\$input ]; then
  echo "No output file generated."
  exit 1
fi

# Make sure output file name isn't too long.

nc=\`echo \$output | wc -c\`
if [ \$nc -ge 200 ]; then
  ext=\${output##*.}
  stem=\${output%.*}
  newstem=\`echo \$stem | cut -c1-150\`_\`uuidgen\`
  newoutput=\${newstem}.\${ext}
  echo "Shortening output file name:"
  echo "\$output"
  echo "->"
  echo "\$newoutput"
  mv \$output \$newoutput
fi

# Delete input file.

rm -f \$input

EOF
